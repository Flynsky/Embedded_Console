<?xml version="1.0" encoding="UTF-8"?>
<!-- Do not edit this file with editors other than draw.io -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" style="background: #ffffff; background-color: light-dark(#ffffff, var(--ge-dark-color, #121212)); color-scheme: light dark;" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="1041px" height="491px" viewBox="-0.5 -0.5 1041 491" content="&lt;mxfile host=&quot;Electron&quot; agent=&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) draw.io/27.0.9 Chrome/134.0.6998.205 Electron/35.4.0 Safari/537.36&quot; version=&quot;27.0.9&quot; scale=&quot;1&quot; border=&quot;5&quot;&gt;&#10;  &lt;diagram name=&quot;Seite-1&quot; id=&quot;gK9CqOPmSTiKl9Cbzm_7&quot;&gt;&#10;    &lt;mxGraphModel dx=&quot;2108&quot; dy=&quot;627&quot; grid=&quot;1&quot; gridSize=&quot;10&quot; guides=&quot;1&quot; tooltips=&quot;1&quot; connect=&quot;1&quot; arrows=&quot;1&quot; fold=&quot;1&quot; page=&quot;1&quot; pageScale=&quot;1&quot; pageWidth=&quot;827&quot; pageHeight=&quot;1169&quot; math=&quot;0&quot; shadow=&quot;0&quot;&gt;&#10;      &lt;root&gt;&#10;        &lt;mxCell id=&quot;0&quot; /&gt;&#10;        &lt;mxCell id=&quot;1&quot; parent=&quot;0&quot; /&gt;&#10;        &lt;mxCell id=&quot;uW0vP4QsPIXNi6B0zQZ2-17&quot; value=&quot;&amp;lt;span style=&amp;quot;font-weight: 700;&amp;quot;&amp;gt;Embedded Software (Microcontroller)&amp;lt;/span&amp;gt;&quot; style=&quot;shape=umlFrame;whiteSpace=wrap;html=1;pointerEvents=0;width=290;height=30;&quot; vertex=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;90&quot; y=&quot;10&quot; width=&quot;630&quot; height=&quot;480&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;uW0vP4QsPIXNi6B0zQZ2-18&quot; value=&quot;&amp;lt;p style=&amp;quot;margin:0px;margin-top:4px;text-align:center;&amp;quot;&amp;gt;&amp;lt;b&amp;gt;console&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;hr size=&amp;quot;1&amp;quot; style=&amp;quot;border-style:solid;&amp;quot;&amp;gt;&amp;lt;p style=&amp;quot;margin:0px;margin-left:4px;&amp;quot;&amp;gt;+ Stream: stream&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;hr size=&amp;quot;1&amp;quot; style=&amp;quot;border-style:solid;&amp;quot;&amp;gt;&amp;lt;p style=&amp;quot;margin:0px;margin-left:4px;&amp;quot;&amp;gt;+ checkStream() : boolean&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;margin:0px;margin-left:4px;&amp;quot;&amp;gt;+ recieveCommand() : const char *&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;margin:0px;margin-left:4px;&amp;quot;&amp;gt;+ decodeCommand(const char *) : void&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;margin:0px;margin-left:4px;&amp;quot;&amp;gt;+ toggleStatusLed() : void&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;margin: 0px 0px 0px 4px;&amp;quot;&amp;gt;+ print(const char *) : boolean&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;margin: 0px 0px 0px 4px;&amp;quot;&amp;gt;+ printf(_varg_) : boolean&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;margin: 0px 0px 0px 4px;&amp;quot;&amp;gt;+ printf_white()&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;margin: 0px 0px 0px 4px;&amp;quot;&amp;gt;+ printf_red()&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;margin: 0px 0px 0px 4px;&amp;quot;&amp;gt;+ printf_cyan(&amp;lt;span style=&amp;quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&amp;quot;&amp;gt;)&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;margin: 0px 0px 0px 4px;&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&amp;quot;&amp;gt;...,&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&quot; style=&quot;verticalAlign=top;align=left;overflow=fill;html=1;whiteSpace=wrap;&quot; vertex=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;440&quot; y=&quot;120&quot; width=&quot;240&quot; height=&quot;200&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;uW0vP4QsPIXNi6B0zQZ2-30&quot; style=&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;&quot; edge=&quot;1&quot; parent=&quot;1&quot; source=&quot;uW0vP4QsPIXNi6B0zQZ2-19&quot; target=&quot;uW0vP4QsPIXNi6B0zQZ2-18&quot;&gt;&#10;          &lt;mxGeometry relative=&quot;1&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;uW0vP4QsPIXNi6B0zQZ2-19&quot; value=&quot;&amp;lt;p style=&amp;quot;margin:0px;margin-top:4px;text-align:center;&amp;quot;&amp;gt;&amp;lt;b&amp;gt;&amp;amp;lt;&amp;amp;lt;interface&amp;amp;gt;&amp;amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;margin:0px;margin-top:4px;text-align:center;&amp;quot;&amp;gt;&amp;lt;b&amp;gt;stream&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;hr size=&amp;quot;1&amp;quot; style=&amp;quot;border-style:solid;&amp;quot;&amp;gt;&amp;lt;p style=&amp;quot;margin:0px;margin-left:4px;&amp;quot;&amp;gt;+ buffer: char *&amp;lt;br&amp;gt;+ buffer_len: const size_t&amp;lt;/p&amp;gt;&amp;lt;hr size=&amp;quot;1&amp;quot; style=&amp;quot;border-style:solid;&amp;quot;&amp;gt;&amp;lt;p style=&amp;quot;margin:0px;margin-left:4px;&amp;quot;&amp;gt;+ virtual avaliable() : boolean&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;margin:0px;margin-left:4px;&amp;quot;&amp;gt;+ virtual read(): const char&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;margin:0px;margin-left:4px;&amp;quot;&amp;gt;+ virtual readline(): const char *&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;margin:0px;margin-left:4px;&amp;quot;&amp;gt;+ virtual flush(): void&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;margin:0px;margin-left:4px;&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;&quot; style=&quot;verticalAlign=top;align=left;overflow=fill;html=1;whiteSpace=wrap;&quot; vertex=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;150&quot; y=&quot;270&quot; width=&quot;190&quot; height=&quot;160&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;uW0vP4QsPIXNi6B0zQZ2-29&quot; style=&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;&quot; edge=&quot;1&quot; parent=&quot;1&quot; source=&quot;uW0vP4QsPIXNi6B0zQZ2-20&quot; target=&quot;uW0vP4QsPIXNi6B0zQZ2-18&quot;&gt;&#10;          &lt;mxGeometry relative=&quot;1&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;uW0vP4QsPIXNi6B0zQZ2-20&quot; value=&quot;&amp;lt;p style=&amp;quot;margin:0px;margin-top:4px;text-align:center;&amp;quot;&amp;gt;&amp;lt;b style=&amp;quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&amp;quot;&amp;gt;stream(Arduino)&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;hr size=&amp;quot;1&amp;quot; style=&amp;quot;border-style:solid;&amp;quot;&amp;gt;&amp;lt;p style=&amp;quot;margin:0px;margin-left:4px;&amp;quot;&amp;gt;+ buffer: char *&amp;lt;br&amp;gt;+ buffer_len: const size_t&amp;lt;/p&amp;gt;&amp;lt;hr size=&amp;quot;1&amp;quot; style=&amp;quot;border-style:solid;&amp;quot;&amp;gt;&amp;lt;p style=&amp;quot;margin:0px;margin-left:4px;&amp;quot;&amp;gt;+ virtual avaliable() : boolean&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;margin:0px;margin-left:4px;&amp;quot;&amp;gt;+ virtual read(): const char&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;margin:0px;margin-left:4px;&amp;quot;&amp;gt;+ virtual readline(): const char *&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;margin:0px;margin-left:4px;&amp;quot;&amp;gt;+ virtual flush(): void&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;margin:0px;margin-left:4px;&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;&quot; style=&quot;verticalAlign=top;align=left;overflow=fill;html=1;whiteSpace=wrap;&quot; vertex=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;150&quot; y=&quot;65&quot; width=&quot;190&quot; height=&quot;160&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;uW0vP4QsPIXNi6B0zQZ2-21&quot; value=&quot;&amp;lt;span style=&amp;quot;font-weight: 700;&amp;quot;&amp;gt;Terminal Console(PC)&amp;lt;/span&amp;gt;&quot; style=&quot;shape=umlFrame;whiteSpace=wrap;html=1;pointerEvents=0;width=170;height=30;&quot; vertex=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;-310&quot; y=&quot;10&quot; width=&quot;360&quot; height=&quot;480&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;uW0vP4QsPIXNi6B0zQZ2-27&quot; style=&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0;entryY=0.5;entryDx=0;entryDy=0;&quot; edge=&quot;1&quot; parent=&quot;1&quot; source=&quot;uW0vP4QsPIXNi6B0zQZ2-23&quot; target=&quot;uW0vP4QsPIXNi6B0zQZ2-20&quot;&gt;&#10;          &lt;mxGeometry relative=&quot;1&quot; as=&quot;geometry&quot;&gt;&#10;            &lt;Array as=&quot;points&quot;&gt;&#10;              &lt;mxPoint x=&quot;130&quot; y=&quot;145&quot; /&gt;&#10;              &lt;mxPoint x=&quot;130&quot; y=&quot;145&quot; /&gt;&#10;            &lt;/Array&gt;&#10;          &lt;/mxGeometry&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;uW0vP4QsPIXNi6B0zQZ2-28&quot; style=&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0;entryY=0.5;entryDx=0;entryDy=0;&quot; edge=&quot;1&quot; parent=&quot;1&quot; source=&quot;uW0vP4QsPIXNi6B0zQZ2-23&quot; target=&quot;uW0vP4QsPIXNi6B0zQZ2-19&quot;&gt;&#10;          &lt;mxGeometry relative=&quot;1&quot; as=&quot;geometry&quot;&gt;&#10;            &lt;Array as=&quot;points&quot;&gt;&#10;              &lt;mxPoint x=&quot;30&quot; y=&quot;145&quot; /&gt;&#10;              &lt;mxPoint x=&quot;30&quot; y=&quot;350&quot; /&gt;&#10;            &lt;/Array&gt;&#10;          &lt;/mxGeometry&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;uW0vP4QsPIXNi6B0zQZ2-31&quot; style=&quot;edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;&quot; edge=&quot;1&quot; parent=&quot;1&quot; source=&quot;uW0vP4QsPIXNi6B0zQZ2-23&quot; target=&quot;uW0vP4QsPIXNi6B0zQZ2-24&quot;&gt;&#10;          &lt;mxGeometry relative=&quot;1&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;uW0vP4QsPIXNi6B0zQZ2-23&quot; value=&quot;&amp;lt;p style=&amp;quot;margin:0px;margin-top:4px;text-align:center;&amp;quot;&amp;gt;&amp;lt;b&amp;gt;console&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;hr size=&amp;quot;1&amp;quot; style=&amp;quot;border-style:solid;&amp;quot;&amp;gt;&amp;lt;p style=&amp;quot;margin:0px;margin-left:4px;&amp;quot;&amp;gt;- client : serial_port&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;hr size=&amp;quot;1&amp;quot; style=&amp;quot;border-style:solid;&amp;quot;&amp;gt;&amp;lt;p style=&amp;quot;margin:0px;margin-left:4px;&amp;quot;&amp;gt;- startConnection () : void&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;margin:0px;margin-left:4px;&amp;quot;&amp;gt;+ listDevices() : string list&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;margin:0px;margin-left:4px;&amp;quot;&amp;gt;+ selectDevice(int numb) : boolean&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;margin:0px;margin-left:4px;&amp;quot;&amp;gt;+ sendString(char * string) : boolean&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;margin:0px;margin-left:4px;&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;&quot; style=&quot;verticalAlign=top;align=left;overflow=fill;html=1;whiteSpace=wrap;&quot; vertex=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;-245&quot; y=&quot;80&quot; width=&quot;230&quot; height=&quot;130&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;uW0vP4QsPIXNi6B0zQZ2-24&quot; value=&quot;&amp;lt;p style=&amp;quot;margin:0px;margin-top:4px;text-align:center;&amp;quot;&amp;gt;&amp;lt;b&amp;gt;logger&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;hr size=&amp;quot;1&amp;quot; style=&amp;quot;border-style:solid;&amp;quot;&amp;gt;&amp;lt;p style=&amp;quot;margin:0px;margin-left:4px;&amp;quot;&amp;gt;WIP&amp;lt;/p&amp;gt;&amp;lt;hr size=&amp;quot;1&amp;quot; style=&amp;quot;border-style:solid;&amp;quot;&amp;gt;&amp;lt;p style=&amp;quot;margin:0px;margin-left:4px;&amp;quot;&amp;gt;WIP&amp;lt;/p&amp;gt;&amp;lt;p style=&amp;quot;margin:0px;margin-left:4px;&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;&quot; style=&quot;verticalAlign=top;align=left;overflow=fill;html=1;whiteSpace=wrap;&quot; vertex=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;-187.5&quot; y=&quot;280&quot; width=&quot;115&quot; height=&quot;80&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;        &lt;mxCell id=&quot;uW0vP4QsPIXNi6B0zQZ2-26&quot; value=&quot;Or&quot; style=&quot;text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;&quot; vertex=&quot;1&quot; parent=&quot;1&quot;&gt;&#10;          &lt;mxGeometry x=&quot;220&quot; y=&quot;235&quot; width=&quot;40&quot; height=&quot;30&quot; as=&quot;geometry&quot; /&gt;&#10;        &lt;/mxCell&gt;&#10;      &lt;/root&gt;&#10;    &lt;/mxGraphModel&gt;&#10;  &lt;/diagram&gt;&#10;&lt;/mxfile&gt;&#10;"><defs/><rect fill="#ffffff" width="100%" height="100%" x="0" y="0" style="fill: light-dark(#ffffff, var(--ge-dark-color, #121212));"/><g><g data-cell-id="0"><g data-cell-id="1"><g data-cell-id="uW0vP4QsPIXNi6B0zQZ2-17"><g><path d="M 405 5 L 695 5 L 695 20 L 685 35 L 405 35 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all" style="fill: light-dark(#ffffff, var(--ge-dark-color, #121212)); stroke: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));"/><path d="M 695 5 L 1035 5 L 1035 485 L 405 485 L 405 35" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none" style="stroke: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 288px; height: 1px; padding-top: 20px; margin-left: 406px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; color: #000000; "><div style="display: inline-block; font-size: 12px; font-family: &quot;Helvetica&quot;; color: light-dark(#000000, #ffffff); line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><span style="font-weight: 700;">Embedded Software (Microcontroller)</span></div></div></div></foreignObject><text x="550" y="24" fill="light-dark(#000000, #ffffff)" font-family="&quot;Helvetica&quot;" font-size="12px" text-anchor="middle">Embedded Software (Microcontroller)</text></switch></g></g></g><g data-cell-id="uW0vP4QsPIXNi6B0zQZ2-18"><g><rect x="755" y="115" width="240" height="200" fill="#ffffff" stroke="#000000" pointer-events="all" style="fill: light-dark(#ffffff, var(--ge-dark-color, #121212)); stroke: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 242px; height: 200px; padding-top: 115px; margin-left: 755px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; width: 240px; height: 200px; overflow: hidden; color: #000000; "><div style="display: inline-block; font-size: 12px; font-family: &quot;Helvetica&quot;; color: light-dark(#000000, #ffffff); line-height: 1.2; pointer-events: all; width: 100%; height: 100%; white-space: normal; word-wrap: normal; "><p style="margin:0px;margin-top:4px;text-align:center;"><b>console</b></p><hr style="border-style:solid;" size="1" /><p style="margin:0px;margin-left:4px;">+ Stream: stream<br /></p><hr style="border-style:solid;" size="1" /><p style="margin:0px;margin-left:4px;">+ checkStream() : boolean</p><p style="margin:0px;margin-left:4px;">+ recieveCommand() : const char *</p><p style="margin:0px;margin-left:4px;">+ decodeCommand(const char *) : void</p><p style="margin:0px;margin-left:4px;">+ toggleStatusLed() : void</p><p style="margin: 0px 0px 0px 4px;">+ print(const char *) : boolean</p><p style="margin: 0px 0px 0px 4px;">+ printf(_varg_) : boolean</p><p style="margin: 0px 0px 0px 4px;">+ printf_white()</p><p style="margin: 0px 0px 0px 4px;">+ printf_red()</p><p style="margin: 0px 0px 0px 4px;">+ printf_cyan(<span style="background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));">)</span></p><p style="margin: 0px 0px 0px 4px;"><span style="background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));">...,</span></p></div></div></div></foreignObject><text x="755" y="127" fill="light-dark(#000000, #ffffff)" font-family="&quot;Helvetica&quot;" font-size="12px">console...</text></switch></g></g></g><g data-cell-id="uW0vP4QsPIXNi6B0zQZ2-30"><g><path d="M 655 345 L 705 345 L 705 215 L 748.63 215" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke" style="stroke: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));"/><path d="M 753.88 215 L 746.88 218.5 L 748.63 215 L 746.88 211.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all" style="fill: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); stroke: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));"/></g></g><g data-cell-id="uW0vP4QsPIXNi6B0zQZ2-19"><g><rect x="465" y="265" width="190" height="160" fill="#ffffff" stroke="#000000" pointer-events="all" style="fill: light-dark(#ffffff, var(--ge-dark-color, #121212)); stroke: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 192px; height: 160px; padding-top: 265px; margin-left: 465px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; width: 190px; height: 160px; overflow: hidden; color: #000000; "><div style="display: inline-block; font-size: 12px; font-family: &quot;Helvetica&quot;; color: light-dark(#000000, #ffffff); line-height: 1.2; pointer-events: all; width: 100%; height: 100%; white-space: normal; word-wrap: normal; "><p style="margin:0px;margin-top:4px;text-align:center;"><b>&lt;&lt;interface&gt;&gt;</b></p><p style="margin:0px;margin-top:4px;text-align:center;"><b>stream</b></p><hr style="border-style:solid;" size="1" /><p style="margin:0px;margin-left:4px;">+ buffer: char *<br />+ buffer_len: const size_t</p><hr style="border-style:solid;" size="1" /><p style="margin:0px;margin-left:4px;">+ virtual avaliable() : boolean</p><p style="margin:0px;margin-left:4px;">+ virtual read(): const char</p><p style="margin:0px;margin-left:4px;">+ virtual readline(): const char *</p><p style="margin:0px;margin-left:4px;">+ virtual flush(): void</p><p style="margin:0px;margin-left:4px;"><br /></p></div></div></div></foreignObject><text x="465" y="277" fill="light-dark(#000000, #ffffff)" font-family="&quot;Helvetica&quot;" font-size="12px">&lt;&lt;interface&gt;&gt;...</text></switch></g></g></g><g data-cell-id="uW0vP4QsPIXNi6B0zQZ2-29"><g><path d="M 655 140 L 705 140 L 705 215 L 748.63 215" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke" style="stroke: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));"/><path d="M 753.88 215 L 746.88 218.5 L 748.63 215 L 746.88 211.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all" style="fill: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); stroke: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));"/></g></g><g data-cell-id="uW0vP4QsPIXNi6B0zQZ2-20"><g><rect x="465" y="60" width="190" height="160" fill="#ffffff" stroke="#000000" pointer-events="all" style="fill: light-dark(#ffffff, var(--ge-dark-color, #121212)); stroke: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 192px; height: 160px; padding-top: 60px; margin-left: 465px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; width: 190px; height: 160px; overflow: hidden; color: #000000; "><div style="display: inline-block; font-size: 12px; font-family: &quot;Helvetica&quot;; color: light-dark(#000000, #ffffff); line-height: 1.2; pointer-events: all; width: 100%; height: 100%; white-space: normal; word-wrap: normal; "><p style="margin:0px;margin-top:4px;text-align:center;"><b style="background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));">stream(Arduino)</b></p><hr style="border-style:solid;" size="1" /><p style="margin:0px;margin-left:4px;">+ buffer: char *<br />+ buffer_len: const size_t</p><hr style="border-style:solid;" size="1" /><p style="margin:0px;margin-left:4px;">+ virtual avaliable() : boolean</p><p style="margin:0px;margin-left:4px;">+ virtual read(): const char</p><p style="margin:0px;margin-left:4px;">+ virtual readline(): const char *</p><p style="margin:0px;margin-left:4px;">+ virtual flush(): void</p><p style="margin:0px;margin-left:4px;"><br /></p></div></div></div></foreignObject><text x="465" y="72" fill="light-dark(#000000, #ffffff)" font-family="&quot;Helvetica&quot;" font-size="12px">stream(Arduino)...</text></switch></g></g></g><g data-cell-id="uW0vP4QsPIXNi6B0zQZ2-21"><g><path d="M 5 5 L 175 5 L 175 20 L 165 35 L 5 35 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all" style="fill: light-dark(#ffffff, var(--ge-dark-color, #121212)); stroke: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));"/><path d="M 175 5 L 365 5 L 365 485 L 5 485 L 5 35" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none" style="stroke: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 168px; height: 1px; padding-top: 20px; margin-left: 6px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; color: #000000; "><div style="display: inline-block; font-size: 12px; font-family: &quot;Helvetica&quot;; color: light-dark(#000000, #ffffff); line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><span style="font-weight: 700;">Terminal Console(PC)</span></div></div></div></foreignObject><text x="90" y="24" fill="light-dark(#000000, #ffffff)" font-family="&quot;Helvetica&quot;" font-size="12px" text-anchor="middle">Terminal Console(PC)</text></switch></g></g></g><g data-cell-id="uW0vP4QsPIXNi6B0zQZ2-27"><g><path d="M 300 140 L 445 140 L 458.63 140" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke" style="stroke: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));"/><path d="M 463.88 140 L 456.88 143.5 L 458.63 140 L 456.88 136.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all" style="fill: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); stroke: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));"/></g></g><g data-cell-id="uW0vP4QsPIXNi6B0zQZ2-28"><g><path d="M 300 140 L 345 140 L 345 345 L 458.63 345" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke" style="stroke: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));"/><path d="M 463.88 345 L 456.88 348.5 L 458.63 345 L 456.88 341.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all" style="fill: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); stroke: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));"/></g></g><g data-cell-id="uW0vP4QsPIXNi6B0zQZ2-31"><g><path d="M 185 205 L 185 268.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke" style="stroke: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));"/><path d="M 185 273.88 L 181.5 266.88 L 185 268.63 L 188.5 266.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all" style="fill: light-dark(rgb(0, 0, 0), rgb(255, 255, 255)); stroke: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));"/></g></g><g data-cell-id="uW0vP4QsPIXNi6B0zQZ2-23"><g><rect x="70" y="75" width="230" height="130" fill="#ffffff" stroke="#000000" pointer-events="all" style="fill: light-dark(#ffffff, var(--ge-dark-color, #121212)); stroke: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 232px; height: 130px; padding-top: 75px; margin-left: 70px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; width: 230px; height: 130px; overflow: hidden; color: #000000; "><div style="display: inline-block; font-size: 12px; font-family: &quot;Helvetica&quot;; color: light-dark(#000000, #ffffff); line-height: 1.2; pointer-events: all; width: 100%; height: 100%; white-space: normal; word-wrap: normal; "><p style="margin:0px;margin-top:4px;text-align:center;"><b>console</b></p><hr style="border-style:solid;" size="1" /><p style="margin:0px;margin-left:4px;">- client : serial_port<br /></p><hr style="border-style:solid;" size="1" /><p style="margin:0px;margin-left:4px;">- startConnection () : void</p><p style="margin:0px;margin-left:4px;">+ listDevices() : string list</p><p style="margin:0px;margin-left:4px;">+ selectDevice(int numb) : boolean</p><p style="margin:0px;margin-left:4px;">+ sendString(char * string) : boolean</p><p style="margin:0px;margin-left:4px;"><br /></p></div></div></div></foreignObject><text x="70" y="87" fill="light-dark(#000000, #ffffff)" font-family="&quot;Helvetica&quot;" font-size="12px">console...</text></switch></g></g></g><g data-cell-id="uW0vP4QsPIXNi6B0zQZ2-24"><g><rect x="127.5" y="275" width="115" height="80" fill="#ffffff" stroke="#000000" pointer-events="all" style="fill: light-dark(#ffffff, var(--ge-dark-color, #121212)); stroke: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 117px; height: 80px; padding-top: 275px; margin-left: 128px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; width: 115px; height: 80px; overflow: hidden; color: #000000; "><div style="display: inline-block; font-size: 12px; font-family: &quot;Helvetica&quot;; color: light-dark(#000000, #ffffff); line-height: 1.2; pointer-events: all; width: 100%; height: 100%; white-space: normal; word-wrap: normal; "><p style="margin:0px;margin-top:4px;text-align:center;"><b>logger</b></p><hr style="border-style:solid;" size="1" /><p style="margin:0px;margin-left:4px;">WIP</p><hr style="border-style:solid;" size="1" /><p style="margin:0px;margin-left:4px;">WIP</p><p style="margin:0px;margin-left:4px;"><br /></p></div></div></div></foreignObject><text x="128" y="287" fill="light-dark(#000000, #ffffff)" font-family="&quot;Helvetica&quot;" font-size="12px">logger...</text></switch></g></g></g><g data-cell-id="uW0vP4QsPIXNi6B0zQZ2-26"><g><rect x="535" y="230" width="40" height="30" fill="none" stroke="none" pointer-events="all"/></g><g><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 245px; margin-left: 555px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; color: #000000; "><div style="display: inline-block; font-size: 12px; font-family: &quot;Helvetica&quot;; color: light-dark(#000000, #ffffff); line-height: 1.2; pointer-events: all; white-space: nowrap; ">Or</div></div></div></foreignObject><text x="555" y="249" fill="light-dark(#000000, #ffffff)" font-family="&quot;Helvetica&quot;" font-size="12px" text-anchor="middle">Or</text></switch></g></g></g></g></g></g></svg>